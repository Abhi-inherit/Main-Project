//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;

    public partial class SellNbuyEntities : DbContext
    {
        public SellNbuyEntities()
            : base("name=SellNbuyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<classified> classifieds { get; set; }
        public virtual DbSet<community> communities { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<motor> motors { get; set; }
        public virtual DbSet<property> properties { get; set; }
        public virtual DbSet<userInfo> userInfoes { get; set; }
        public virtual DbSet<pro_motor> pro_motor { get; set; }
    
        public virtual ObjectResult<string> classifiedsInsert(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("classifiedsInsert", catParameter);
        }
    
        public virtual ObjectResult<string> communityInsert(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("communityInsert", catParameter);
        }
    
        public virtual ObjectResult<string> JobInsert(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("JobInsert", catParameter);
        }
    
        public virtual ObjectResult<string> MotorInsert(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MotorInsert", catParameter);
        }
    
        public virtual ObjectResult<string> PropInsert(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PropInsert", catParameter);
        }
    
        public virtual ObjectResult<string> userInsert(string name, string mail, string password, string phoneno)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var phonenoParameter = phoneno != null ?
                new ObjectParameter("phoneno", phoneno) :
                new ObjectParameter("phoneno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("userInsert", nameParameter, mailParameter, passwordParameter, phonenoParameter);
        }
    
        public virtual ObjectResult<string> LoginCheck(string mail, string password)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LoginCheck", mailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetMotorCat_Result> GetMotorCat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMotorCat_Result>("GetMotorCat");
        }
    
        public virtual ObjectResult<string> Pro_Motor_Insert(Nullable<int> fk_cat_id, string title, string company, string photo, Nullable<int> km, Nullable<int> year, string body, string engine, string fuel, string hp, string phoneno, string price, string description, string location, string checkbox)
        {
            var fk_cat_idParameter = fk_cat_id.HasValue ?
                new ObjectParameter("fk_cat_id", fk_cat_id) :
                new ObjectParameter("fk_cat_id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            var kmParameter = km.HasValue ?
                new ObjectParameter("km", km) :
                new ObjectParameter("km", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var engineParameter = engine != null ?
                new ObjectParameter("engine", engine) :
                new ObjectParameter("engine", typeof(string));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("fuel", fuel) :
                new ObjectParameter("fuel", typeof(string));
    
            var hpParameter = hp != null ?
                new ObjectParameter("hp", hp) :
                new ObjectParameter("hp", typeof(string));
    
            var phonenoParameter = phoneno != null ?
                new ObjectParameter("phoneno", phoneno) :
                new ObjectParameter("phoneno", typeof(string));
    
            var priceParameter = price != null ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var checkboxParameter = checkbox != null ?
                new ObjectParameter("checkbox", checkbox) :
                new ObjectParameter("checkbox", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pro_Motor_Insert", fk_cat_idParameter, titleParameter, companyParameter, photoParameter, kmParameter, yearParameter, bodyParameter, engineParameter, fuelParameter, hpParameter, phonenoParameter, priceParameter, descriptionParameter, locationParameter, checkboxParameter);
        }

        //public System.Data.Entity.DbSet<BLL.Models.EntyMotors> EntyMotors { get; set; }
    }
}

